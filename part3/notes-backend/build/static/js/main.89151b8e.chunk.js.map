{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","content","request","axios","get","nonExisting","id","date","important","then","response","data","concat","newObject","post","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","useEffect","noteService","initialNotes","notesToShow","filter","onClick","map","i","key","toggleImportance","find","n","changedNote","returnedNote","catch","error","alert","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","length","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"8LAQeA,EANF,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACd,OACE,4BAAKA,EAAKC,U,gBCqBC,EAtBA,WACb,IAAMC,EAAUC,IAAMC,IAHR,cAIRC,EAAc,CAClBC,GAAI,IACJL,QAAS,mCACTM,KAAM,2BACNC,WAAW,GAEb,OAAON,EAAQO,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,OAAOP,OAcxC,EAVA,SAAAQ,GAEb,OADgBV,IAAMW,KAfR,aAesBD,GACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACL,EAAIO,GAElB,OADgBV,IAAMY,IAAN,UApBF,aAoBE,YAAwBT,GAAMO,GAC/BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCiE5BK,EAnFH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,KAKhBC,qBAAU,WACRC,IAEGhB,MAAK,SAAAiB,GACJP,EAASO,QAEZ,IAEH,IAsCMC,EAAcL,EAChBJ,EACAA,EAAMU,QAAO,SAAA5B,GAAI,OAAIA,EAAKQ,aAE9B,OACE,6BACE,qCACA,6BACE,4BAAQqB,QAAS,kBAAMN,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BACGK,EAAYG,KAAI,SAAC9B,EAAM+B,GAAP,OACf,kBAAC,EAAD,CACEC,IAAKD,EACL/B,KAAMA,EACNiC,iBAAkB,kBAtCD,SAAC3B,GAC1B,IAAMN,EAAOkB,EAAMgB,MAAK,SAAAC,GAAC,OAAIA,EAAE7B,KAAOA,KAChC8B,EAAW,eAAQpC,EAAR,CAAcQ,WAAYR,EAAKQ,YAEhDiB,EACUnB,EAAI8B,GACX3B,MAAK,SAAA4B,GACJlB,EAASD,EAAMY,KAAI,SAAA9B,GAAI,OAAIA,EAAKM,KAAOA,EAAKN,EAAOqC,SAEpDC,OAAM,SAAAC,GACLC,MAAM,aAAD,OACUxC,EAAKC,QADf,sCAGLkB,EAASD,EAAMU,QAAO,SAAAO,GAAC,OAAIA,EAAE7B,KAAOA,SAyBRmC,CAAmBzC,EAAKM,WAItD,0BAAMoC,SA3DM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjB5C,QAASmB,EACTb,MAAM,IAAIuC,MAAOC,cACjBvC,UAAWwC,KAAKC,SAAW,GAC3B3C,GAAIY,EAAMgC,OAAS,GAGrBzB,EACUoB,GACPpC,MAAK,SAAA4B,GACJlB,EAASD,EAAMN,OAAOyB,IACtBhB,EAAW,SA+CX,2BACE8B,MAAO/B,EACPgC,SA5BiB,SAACT,GACxBtB,EAAWsB,EAAMU,OAAOF,UA6BpB,4BAAQG,KAAK,UAAb,WC7ERC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.89151b8e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ note }) => {\r\n  return (\r\n    <li>{note.content}</li>\r\n  )\r\n}\r\n\r\nexport default Note","import axios from 'axios';\r\nconst baseUrl = '/api/notes';\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl);\r\n  const nonExisting = {\r\n    id: 10000,\r\n    content: 'This note is not saved to server',\r\n    date: '2019-05-30T17:30:31.098Z',\r\n    important: true\r\n  };\r\n  return request.then(response => response.data.concat(nonExisting));\r\n  // return request.then(response => response.data)\r\n};\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject);\r\n  return request.then(response => response.data);\r\n};\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\r\n  return request.then(response => response.data);\r\n};\r\n\r\nexport default { getAll, create, update }\r\n;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Note from './components/Note';\r\nimport noteService from './services/notes';\r\n\r\nconst App = () => {\r\n  const [notes, setNotes] = useState([]);\r\n  const [newNote, setNewNote] = useState('');\r\n  const [showAll, setShowAll] = useState(true);\r\n\r\n  useEffect(() => {\r\n    noteService\r\n      .getAll()\r\n      .then(initialNotes => {\r\n        setNotes(initialNotes);\r\n      });\r\n  }, []);\r\n\r\n  const addNote = (event) => {\r\n    event.preventDefault();\r\n    const noteObject = {\r\n      content: newNote,\r\n      date: new Date().toISOString(),\r\n      important: Math.random() > 0.5,\r\n      id: notes.length + 1\r\n    };\r\n\r\n    noteService\r\n      .create(noteObject)\r\n      .then(returnedNote => {\r\n        setNotes(notes.concat(returnedNote));\r\n        setNewNote('');\r\n      });\r\n  };\r\n\r\n  const toggleImportanceOf = (id) => {\r\n    const note = notes.find(n => n.id === id);\r\n    const changedNote = { ...note, important: !note.important };\r\n\r\n    noteService\r\n      .update(id, changedNote)\r\n      .then(returnedNote => {\r\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote));\r\n      })\r\n      .catch(error => {\r\n        alert(\r\n          `the note '${note.content}' was already deleted from server`\r\n        );\r\n        setNotes(notes.filter(n => n.id !== id));\r\n      });\r\n  };\r\n\r\n  const handleNoteChange = (event) => {\r\n    setNewNote(event.target.value);\r\n  };\r\n\r\n  const notesToShow = showAll\r\n    ? notes\r\n    : notes.filter(note => note.important);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Notes</h1>\r\n      <div>\r\n        <button onClick={() => setShowAll(!showAll)}>\r\n          show {showAll ? 'important' : 'all'}\r\n        </button>\r\n      </div>\r\n      <ul>\r\n        {notesToShow.map((note, i) =>\r\n          <Note\r\n            key={i}\r\n            note={note}\r\n            toggleImportance={() => toggleImportanceOf(note.id)}\r\n          />\r\n        )}\r\n      </ul>\r\n      <form onSubmit={addNote}>\r\n        <input\r\n          value={newNote}\r\n          onChange={handleNoteChange}\r\n        />\r\n        <button type='submit'>save</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}